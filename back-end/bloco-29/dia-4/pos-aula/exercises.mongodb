use class;

show collections;

db.movies.find();

// 1
db.movies.updateOne(
  { title: 'Batman' },
  { $set: { imdbRating: 7.7 } },
);

db.movies.findOne({
  title: 'Batman',
});

// 2
db.movies.updateOne(
  { title: 'Godzilla' },
  { $set: { budget: 1 } },
);

db.movies.findOne({
  title: 'Godzilla',
});

// 3
db.movies.updateOne(
  { title: 'Home Alone' },
  { $set: { budget: 15, imdbRating: 5.5 } },
);

db.movies.findOne({
  title: 'Home Alone',
});

// 4
db.movies.updateOne(
  { title: 'Batman' },
  { $inc: { imdbRating: 2 }},
);

db.movies.findOne({
  title: 'Batman',
});

// 5
db.movies.updateOne(
  { title: 'Home Alone' },
  { $inc: { budget: 5 } },
);

db.movies.findOne({
  title: 'Home Alone',
});

// 6
db.movies.updateOne(
  { title: 'Batman' },
  { $mul: { imdbRating: 4 }},
);

db.movies.findOne({
  title: 'Batman',
});

// 7
db.movies.updateOne(
  { title: 'Batman' },
  { $rename: { budget: 'estimatedBudget' }},
);

db.movies.findOne({
  title: 'Batman',
});

// 8
db.movies.updateOne(
  { title: 'Home Alone' },
  { $min: { budget: 5 } },
);

db.movies.findOne({
  title: 'Home Alone',
});

// 9
db.movies.updateOne(
  { title: 'Godzilla' },
  { 
    $max: { imdbRating: 8.6 },
    $set: { 'category.1': 'thriller' },
  },
);

db.movies.findOne({
  title: 'Godzilla',
});

// 10
db.movies.updateOne(
  { title: 'Home Alone' },
  { $currentDate: { lastUpdated: { $type: 'timestamp'} } },
);

db.movies.findOne({
  title: 'Home Alone',
});

// 11
db.movies.updateMany({ }, { $set: { sequels: 0 } });
db.movies.find();

// 12
db.movies.updateMany({ }, { $unset: { budget: '', estimatedBudget: '' } });
db.movies.find();

// 13
db.movies.updateMany(
  { 
    $or: [
      { title: 'Batman' },
      { title: 'Home Alone' },
    ],
  },
  { $max: { imdbRating: 17 } },
);

db.movies.find(
  {
    $or: [
      { title: 'Batman' },
      { title: 'Home Alone' },
    ],
  },
);

// BONUS
// 14 ðŸš€
db.xmen.find({}).limit(2);

db.xmen.updateMany(
  { 
    class: 'unknown',
  },
  { 
    $unset: { class: '' },
    $currentDate: { lastUpdate: { $type: 'timestamp'} },
  },
);

// 15 ðŸš€
db.xmen.find({}).limit(2);

db.xmen.updateMany(
  { },
  { 
    $rename: { name: 'hero_name', true_name: 'full_name' },
    $set: { power: 100 },
    $currentDate: { lastUpdate: { $type: 'timestamp'} },
  },
);

// 16 ðŸš€
db.xmen.updateMany(
  {
    $or: [
      { class: 'omega' },
      { class: 'gama' },
    ],
  },
  {
    $max: { power: 500 },
    $currentDate: { lastUpdate: { $type: 'timestamp'} },
  }
);

db.xmen.find(
  {
    $or: [
      { class: 'omega' },
      { class: 'gama' },
    ],
  },
);

// 17 ðŸš€
db.xmen.updateMany(
  {
    class: 'gama',
  },
  {
    $min: { power: 300 },
    $currentDate: { lastUpdate: { $type: 'timestamp'} },
  },
);

db.xmen.find({ class: 'gama' });

// 18 ðŸš€
db.xmen.updateMany(
  {
    class: { $exists: false },
  },
  {
    $inc: { power: -100 },
    $currentDate: { lastUpdate: { $type: 'timestamp'} },
  },
);

db.xmen.find({
  class: { $exists: false },
});

// 19 ðŸš€
db.xmen.updateMany(
  {
    $or: [
      { occupation: 'Senior Staff', power: { $gt: 100 } },
      { occupation: 'Junior Staff', power: { $gt: 200 } },
    ],
  },
  {
    $set: { areas: ['Students Room'] },
    $currentDate: { lastUpdate: { $type: 'timestamp'} },
  }
);

db.xmen.find(
  {
    $or: [
      { occupation: 'Senior Staff', power: { $gt: 100 } },
      { occupation: 'Junior Staff', power: { $gt: 200 } },
    ],
  },
);

// 20 ðŸš€
db.xmen.find({
    occupation: 'Junior Staff',
    areas: { $exists: false },
});

db.xmen.updateMany(
  {
    occupation: 'Junior Staff',
    areas: { $exists: false },
  },
  {
    $set: { areas: ['Outside'] },
    $currentDate: { lastUpdate: { $type: 'timestamp'} },
  },
);

db.xmen.find({
    occupation: 'Junior Staff',
    areas: { $exists: true },
});
