use conteudo_trybe;

// 1
db.inventory.find({
  item: 'paper',
});

db.inventory.updateOne(
  { item: "paper" },
  { $set: { "size.uom": "cm", status: "P" } }
);

// 2
db.inventory.find({
  qty: { $lt: 50 },
});

db.inventory.updateMany(
  { "qty": { $lt: 50 } },
  { $set: { "size.uom": "in", status: "P" } }
);

// 3
use conteudo_trybe;

db.products.insertOne({
  _id: 100,
  sku: "abc123",
  quantity: 250,
  instock: true,
  reorder: false,
  details: { model: "14Q2", make: "xyz" },
  tags: [ "apparel", "clothing" ],
  ratings: [ { by: "ijk", rating: 4 } ]
});

db.products.find();

// 3.1
db.products.updateOne(
  { _id: 100 },
  { $set: {
      quantity: 500,
      details: { model: "14Q3", make: "xyz" },
      tags: [ "coats", "outerwear", "clothing" ]
    }
  }
);

// 3.2
db.products.updateOne(
  { _id: 100 },
  { $set: { "details.make": "zzz" } }
);

// 3.3
db.products.updateOne(
  { _id: 100 },
  { $set: {
      "tags.1": "rain gear",
      "ratings.0.rating": 2
    }
  }
);

// 4
// 4.1
db.products.insertOne(
  { "_id": 1, "item": "ABC", "price": NumberDecimal("10.99"), "qty": 25 }
);

db.products.findOne({
  "_id": 1,
});

db.products.updateOne(
  { _id: 1 },
  { $mul: { price: NumberDecimal("1.25"), qty: 2 } }
);

// 4.2
db.products.insertOne(
  { _id: 2, item: "Unknown" }
);

db.products.findOne({
  "_id": 2,
});

db.products.updateOne(
  { _id: 2 },
  { $mul: { price: NumberLong("100") } }
);

// 4.3
db.products.insertOne(
  { _id: 3,  item: "XYZ", price: NumberLong("10") }
);

db.products.findOne({
  "_id": 3,
});

db.products.updateOne(
  { _id: 3 },
  { $mul: { price: NumberInt(5) } },
);

// 5
db.increment.insertOne(
  {
    _id: 1,
    sku: "abc123",
    quantity: 10,
    metrics: {
      orders: 2,
      ratings: 3.5
    }
  }
);

db.increment.updateOne(
  { sku: "abc123" },
  { $inc: { quantity: -2, "metrics.orders": 1 } }
);

db.increment.findOne({
  sku: "abc123",
});


// 6
db.collection.insertMany([
  { _id: 1, campo: 25 },
  { _id: 2, campo: 50 },
  { _id: 3, campo: 100 },
]);

// 6.1
db.collection.updateMany({}, { $max: { campo: 75 } });

db.collection.find();

// 6.2
db.collection.updateMany({}, { $min: { campo: 42 } });

db.collection.find();

// 6.3
db.scores.insertOne(
  { _id: 1, highScore: 800, lowScore: 200 }
);

// 6.3.1
db.scores.updateOne({ _id: 1 }, { $min: { lowScore: 150 } });
db.scores.find();
db.scores.updateOne({ _id: 1 }, { $min: { lowScore: 250 } });
db.scores.find();

// 6.3.2
db.scores.updateOne({ _id: 1 }, { $max: { highScore: 950 } });
db.scores.find();
db.scores.updateOne({ _id: 1 }, { $max: { highScore: 870 } });
db.scores.find();

// 6.4
db.tags.insertOne(
  {
    _id: 1,
    desc: "crafts",
    dateEntered: ISODate("2019-10-01T05:00:00Z"),
    dateExpired: ISODate("2019-10-01T16:38:16Z")
  }
);
db.tags.find();

db.tags.updateOne(
  { _id: 1 },
  {
    $min: { dateEntered: new Date("2019-09-25") },
    $max: { dateExpired: new Date("2019-10-02") }
  }
);

// 7
db.customers.insertOne(
  { _id: 1, status: "a", lastModified: ISODate("2013-10-02T01:11:18.965Z") }
);

db.customers.find();

db.customers.updateOne(
  { _id: 1 },
  { 
    $currentDate: {
      lastModified: true,
      "cancellation.date": { $type: "timestamp" }
    },
    $set: {
      "cancellation.reason": "user request",
      status: "D"
    },
  },
);

// 8
use conteudo_trybe;

db.fruits.insertOne(
  { _id: 100, name: "Banana", quantity: 100, inStock: true }
);

db.fruits.find();

db.fruits.updateOne(
  { name: "Banana" },
  { $rename: {
      "name": "productName"
    }
  }
);

// 9
db.fruits.updateMany(
  { productName: "Banana" },
  { $unset: { quantity: "anything" } }
);
